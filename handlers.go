package main

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	tele "gopkg.in/telebot.v4"
)

func RegisterHandlers(bot *tele.Bot, store *ReminderStore, scheduler *ReminderScheduler) {
	// /notify HH:MM —Å–æ–æ–±—â–µ–Ω–∏–µ
	bot.Handle("/notify", func(c tele.Context) error {
		args := c.Args()
		if len(args) < 2 {
			return c.Send("üëá –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /notify 21:00 —Å–æ—Å–∞–ª —Ç–∞–±–ª–µ—Ç–∫—É?")
		}

		timeStr := args[0]
		message := strings.Join(args[1:], " ")

		if _, err := time.Parse("15:04", timeStr); err != nil {
			return c.Send("‚õî –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30")
		}

		reminder := Reminder{
			ChatID:  c.Chat().ID,
			Time:    timeStr,
			Message: message,
		}
		r := store.Add(reminder)
		scheduler.Schedule(store.All())

		return c.Send(fmt.Sprintf("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #%d —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %s: %s", r.ID, timeStr, message))
	})

	// /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	bot.Handle("/list", func(c tele.Context) error {
		chatID := c.Chat().ID
		var result []string

		for _, r := range store.List(chatID) {
			result = append(result, fmt.Sprintf("[%d] üïí %s ‚Äî %s", r.ID, r.Time, r.Message))
		}

		if len(result) == 0 {
			return c.Send("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
		}

		return c.Send("üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + strings.Join(result, "\n"))
	})

	// /delete ID ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID
	bot.Handle("/delete", func(c tele.Context) error {
		args := c.Args()
		if len(args) < 1 {
			return c.Send("‚õî –£–∫–∞–∂–∏ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete 1")
		}

		id, err := strconv.Atoi(args[0])
		if err != nil {
			return c.Send("‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /delete 1")
		}

		chatID := c.Chat().ID
		if !store.Delete(chatID, id) {
			return c.Send("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
		}

		scheduler.Schedule(store.All())
		return c.Send(fmt.Sprintf("üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #%d —É–¥–∞–ª–µ–Ω–æ.", id))
	})

	// /clear ‚Äî —É–¥–∞–ª–∏—Ç—å –í–°–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	bot.Handle("/clear", func(c tele.Context) error {
		chatID := c.Chat().ID
		store.Clear(chatID)
		scheduler.Schedule(store.All())
		return c.Send("üßπ –í—Å–µ —Ç–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.")
	})

	// /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
	bot.Handle("/help", func(c tele.Context) error {
		return c.Send(`üìñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

/notify HH:MM —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/delete ID ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID
/clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞`)
	})
}
